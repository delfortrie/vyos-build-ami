---
- name: remove sources.list
  file:
    path: "/etc/apt/sources.list"
    state: absent

- name: remove sources.list.d
  file:
    path: "/etc/apt/sources.list.d"
    state: absent

- name: update sources.list
  copy:
    src: "files/sources.list"
    dest: "/etc/apt/sources.list"
    owner: root
    group: root
    mode: 0644
    force: yes

- name: Install required packages
  apt:
    update_cache: yes
    name:
      - parted
      - e2fsprogs
      - gnupg
    state: present

# ---- Set up the specified ISO release ----

- name: Download VyOS ISO release
  get_url:
    url: "{{ vyos_iso_url }}"
    dest: "{{ vyos_iso_local }}"

- name: Mount ISO
  mount:
    name: "{{ CD_ROOT }}"
    src: "{{ vyos_iso_local }}"
    fstype: iso9660
    opts: loop,ro
    state: mounted

- name: Check if md5sum.txt exists in ISO
  stat:
    path: "{{ CD_ROOT }}/md5sum.txt"
  register: md5sum_file

- name: Verify checksums of all the files in the ISO image
  command: md5sum -c md5sum.txt
  args:
    chdir: "{{ CD_ROOT }}"
  changed_when: False
  when: md5sum_file.stat.exists

- name: Mount squashfs image from ISO
  mount:
    name: "{{ CD_SQUASH_ROOT }}"
    src: "{{ SQUASHFS_IMAGE }}"
    fstype: squashfs
    opts: loop,ro
    state: mounted

- name: Read version string from iso packages
  shell: cat {{ CD_SQUASH_ROOT }}/opt/vyatta/etc/version | awk '{print $2}' | tr + -
  register: version_string

- name: Debug version string as read from ISO
  debug: msg="This is version {{ version_string.stdout }}"

- name: Partition the target drive
  parted:
    device: "{{ volume_drive }}"
    state: present
    label: msdos
    number: 1
    part_type: primary
    part_start: 0%
    part_end: 100%
    align: optimal
    flags: [boot]

- name: Create a filesystem on root partition
  filesystem:
    fstype: "{{ ROOT_FSTYPE }}"
    device: "{{ ROOT_PARTITION }}"
    opts: "-L persistence"

- name: Mount root partition
  mount:
    name: "{{ WRITE_ROOT }}"
    src: "{{ ROOT_PARTITION }}"
    fstype: "{{ ROOT_FSTYPE }}"
    state: mounted

    # ---- Install image from ISO ----
- name: Create {{ WRITE_ROOT }} directories
  file:
    path: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/rw"
    state: directory
  register: RW_DIR

- name: Create the work directory
  file:
    path: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/work/work"
    state: directory
  register: WORK_DIR

- name: Copy squashfs image from ISO to root partition
  command: cp -p {{ SQUASHFS_IMAGE }} {{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/{{ version_string.stdout }}.squashfs
  args:
    creates: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/{{ version_string.stdout }}.squashfs"

- name: Copy boot files (kernel and initrd images) from ISO to root partition
  shell: find {{ CD_SQUASH_ROOT }}/boot -maxdepth 1  \( -type f -o -type l \) -print -exec cp -dp {} {{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/ \;
  args:
    creates: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/vmlinuz"

- name: Mount squashfs image from root partition
  mount:
    name: "{{ READ_ROOT }}"
    src: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/{{ version_string.stdout }}.squashfs"
    fstype: squashfs
    opts: loop,ro
    state: mounted

- name: Set up union root for post installation tasks
  mount:
    name: "{{ INSTALL_ROOT }}"
    src: overlay
    fstype: overlay
    opts: "lowerdir={{ READ_ROOT }},upperdir={{ RW_DIR.path }},workdir={{ WORK_DIR.path }}"
    state: mounted

# ---- Post image installation tasks ----

    ## ---- VyOS configuration ----
- name: Make sure that config partition marker exists
  file:
    path: "{{ INSTALL_ROOT }}/opt/vyatta/etc/config/.vyatta_config"
    state: touch

# Not copying config.boot so VyOS uses its own defaults
#- name: Copy the default config for EC2 to the installed image
#  template:
#    src: templates/config.boot.default.ec2
#    dest: "{{ INSTALL_ROOT }}/opt/vyatta/etc/config/config.boot"
#    mode: 0755

    ## ---- Install GRUB boot loader ----
- name: Create GRUB directory
  file:
    path: "{{ WRITE_ROOT }}/boot/grub"
    state: directory

# It is necessary to mount and bind /dev, /proc, /sys and /boot in order to execute grub-install
# and install GRUB correctly within the {{ volume_drive }} using chroot

# XXX: ansible mount module requires fstype so it cannot be used for binding an already
# mounted location, we get to use mount directly at least for /boot
- name: Mount and bind /dev /proc /sys and {{ WRITE_ROOT }}/boot to {{ INSTALL_ROOT }}
  shell: mount --bind /dev {{ INSTALL_ROOT }}/dev &&
          mount --bind /proc {{ INSTALL_ROOT }}/proc &&
          mount --bind /sys {{ INSTALL_ROOT }}/sys &&
          mount --bind {{ WRITE_ROOT }} {{ INSTALL_ROOT }}/boot

    ## ---- Install and configure cloud-init for EC2 ----
- name: Copy DNS configuration into chroot
  copy:
    src: /etc/resolv.conf
    dest: "{{ INSTALL_ROOT }}/etc/resolv.conf"
    remote_src: yes

- name: Install cloud-init in VyOS image
  shell: |
    chroot {{ INSTALL_ROOT }} /bin/bash -c "
      set -euo pipefail
      export DEBIAN_FRONTEND=noninteractive
      export APT_LISTCHANGES_FRONTEND=none
      export NEEDRESTART_MODE=a

      # Prevent service starts inside chroot (avoid hangs)
      printf '%s\n' '#!/bin/sh' 'exit 101' > /usr/sbin/policy-rc.d
      chmod +x /usr/sbin/policy-rc.d

      # Update package lists with sane network defaults
      apt-get -o Acquire::ForceIPv4=true -o Acquire::Retries=3 -o Acquire::http::Timeout=30 update

      # Prefer VyOS cloud-init integration if available; fallback to Debian cloud-init
      if ! apt-get install -y --no-install-recommends vyos-cloud-init; then
        apt-get install -y --no-install-recommends cloud-init || true
      fi

      # Configure cloud-init for EC2 (minimal; let VyOS package control modules)
      cat > /etc/cloud/cloud.cfg.d/99_ec2.cfg <<'EOF'
    datasource_list: [ Ec2 ]
    datasource:
      Ec2:
        strict_id: false
        metadata_urls: ['http://169.254.169.254']
        timeout: 10
        max_wait: 30
    network:
      config: disabled
    ssh_pwauth: false
    EOF

      # Ensure cloud-init targets the VyOS user for SSH key injection
      cat > /etc/cloud/cloud.cfg.d/99_vyos_user.cfg <<'EOFU'
    system_info:
      default_user:
        name: vyos
        gecos: VyOS
        lock_passwd: false
        shell: /bin/bash
    users:
      - default
    chpasswd:
      list: |
        vyos:vyos
      expire: true
    EOFU

      # Clean cloud-init state so it runs on first boot
      cloud-init clean --logs --seed

      # Allow services to start normally on actual boots
      rm -f /usr/sbin/policy-rc.d || true
    "

- name: Display cloud-init installation confirmation
  debug:
    msg: "Cloud-init has been installed and configured for EC2"

- name: Install GRUB in the boot sector of {{ volume_drive }}
  command: chroot {{ INSTALL_ROOT }} grub-install --no-floppy --root-directory=/boot {{ volume_drive }}
  args:
    creates: "{{ INSTALL_ROOT }}/boot/grub/grubenv"

- name: Configure GRUB for AWS EC2
  template:
    src: templates/boot/grub/grub.cfg.j2
    dest: "{{ WRITE_ROOT }}/boot/grub/grub.cfg"
    mode: 0644

- name: Create the persistence config
  template:
    src: templates/persistence.conf
    dest: "{{ WRITE_ROOT }}/persistence.conf"
    mode: 0644

# ---- Unmount all mounts ----
- name: Kill any processes still running in chroot
  shell: |
    # Find and kill any processes with chroot as their root
    for pid in $(lsof -t {{ INSTALL_ROOT }} 2>/dev/null || true); do
      kill -9 $pid 2>/dev/null || true
    done
    # Sync to ensure all writes are flushed
    sync
  ignore_errors: yes

- name: Force unmount all filesystems (lazy unmount to avoid busy errors)
  shell: |
    umount -l "{{ INSTALL_ROOT }}/boot" 2>/dev/null || true
    umount -l "{{ INSTALL_ROOT }}/sys" 2>/dev/null || true
    umount -l "{{ INSTALL_ROOT }}/proc" 2>/dev/null || true
    umount -l "{{ INSTALL_ROOT }}/dev" 2>/dev/null || true
    umount -l "{{ INSTALL_ROOT }}" 2>/dev/null || true
    umount -l "{{ READ_ROOT }}" 2>/dev/null || true
    umount -l "{{ WRITE_ROOT }}" 2>/dev/null || true
    umount -l "{{ CD_SQUASH_ROOT }}" 2>/dev/null || true
    umount -l "{{ CD_ROOT }}" 2>/dev/null || true
    sync
  ignore_errors: yes
